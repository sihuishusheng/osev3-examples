
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
// apply plugin: 'java-library-distribution'
// apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
// apply plugin: 'com.bmuschko.gradle.docker.DockerRemoteApiPlugin'
// apply plugin: 'docker' 

ext {
    mavenUrl = project.hasProperty('mavenUrl') ? project.mavenUrl : ''
    mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : ''
    mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : ''

    mavenNexusProxy = 'http://172.17.4.50:8081/content/groups/public'
    mavenNexusOffline = 'http://172.17.4.50:8081/content/repositories/allsynced'    

    dockerRegistryUsername = project.hasProperty('dockerRegistryUsername') ? project.dockerRegistryUsername : ''
    dockerRegistryPassword = project.hasProperty('dockerRegistryPassword') ? project.dockerRegistryPassword : ''
    dockerRegistryEmail = project.hasProperty('dockerRegistryEmail') ? project.dockerRegistryEmail : ''

    dockerCertPath = '/etc/docker/certs.d/172.17.4.50:5000'
    dockerfilePath = 'docker/Dockerfile.java-openjdk1.8-headless'
    // dockerHub = 'https://index.docker.io/v1/'
    dockerHub = 'https://172.17.4.50:5000'
    dockerImageName = '172.17.4.50:5000/springboot-osev3-examples'
    dockerImageTag = 'repositories-mem'
}

archivesBaseName = "repositories-mem"
version = '0.0.1'
group = 'com.openshift.evangelists.microservices-demo-springboot'

mainClassName = 'com.openshift.evangelists.microservices.repository.InMemoryRepositoryApplication'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    deployerJars
    
    provided
    // compile.extendsFrom(provided)

    // archives.extendsFrom(testCompile)
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

compileJava {
  options.encoding = 'UTF-8'
  // Add unchecked once we drop support for Java 7 as @SuppressWarnings("unchecked") is too buggy in Java 7
  options.compilerArgs << "-Xlint:deprecation"
}

jar {
    baseName = "${archivesBaseName}"
    version =  "${version}"
    // from { configurations.runtime.collect { it.directory ? it : zipTree(it) } }
}

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}
 
task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives jar
     // archives sourcesJar
     // archives javadocJar
}

task testJar(type: Jar) {
    classifier = 'test'
    from sourceSets.test.output
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

repositories {
    // jcenter()
    // mavenLocal()
    // mavenCentral()
    maven {
        // url "http://172.17.4.50:8081/content/groups/public"
        url "${mavenNexusProxy}"
    }
	// maven { url "http://repo.spring.io/release" }
	// maven { url "http://repo.spring.io/milestone" }
	// maven { url "http://repo.spring.io/snapshot" }
    maven {
        // url "http://172.17.4.50:8081/content/repositories/allsynced"
        url "${mavenNexusOffline}"
    }
}

install {
    repositories.mavenInstaller {
        // pom.version = ${version}
        // pom.artifactId = ${archivesBaseName}
        // pom.groupId = ${group}
    }
}

uploadArchives {
    repositories {
        configuration = configurations.deployerJars
        // configuration = configurations.archives
        mavenDeployer {
            // repository(url: "http://172.17.4.50:8081/content/repositories/releases"){
            //   authentication(userName: "admin", password: "admin123")
            // }
            repository(url: "${mavenUrl}"){
                authentication(userName: "${mavenUsername}", password: "${mavenPassword}")
            }
            pom {
                project {
                   name "${archivesBaseName}"
                   description project.description
                   packaging 'jar'
                   url 'https://github.com/tangfeixiong/osev3-examples'
                    parent {
                        // groupId "org.springframework.boot"
                        // artifactId "spring-boot-starter-parent"
                        // version "1.5.4.RELEASE"
                        groupId "com.openshift.evangelists"
                        artifactId "microservices-demo-springboot"
                        version "0.0.1"
                    }
                    // dependencyManagement {
                    //     dependencies {
                    //         dependency {
                    //             groupId "org.springframework.boot"
                    //             artifactId "spring-boot-dependencies"
                    //             version "1.5.4.RELEASE"
                    //             type "pom"
                    //             scope "import"
                    //         }
                    //     }
                    // }
                }
            }
        }
    }
}

dependencies {
    // compile "org.apache.kafka:connect-api:0.9.0.0"
    // compile "com.zendesk:maxwell:0.14.6"
    // compile "org.slf4j:slf4j-api:1.7.6"
    compile "org.hibernate:hibernate-validator:5.1.1.Final"
    compile "org.springframework:spring-web:4.2.8.RELEASE"
    compile "com.fasterxml.jackson.core:jackson-databind:2.8.7"
    
    provided "org.projectlombok:lombok:1.16.2"

	compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile("org.springframework.boot:spring-boot-starter-jdbc")
	compile("org.springframework.boot:spring-boot-starter-security")
    
	// runtime("com.h2database:h2")

	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
	testCompile("org.springframework.boot:spring-boot-starter-test")
    
    testCompile "junit:junit:4.11"
    testCompile "org.easymock:easymock:3.3.1"
    testCompile "org.powermock:powermock-module-junit4:1.6.2"
    testCompile "org.powermock:powermock-api-easymock:1.6.2"
    // testRuntime "org.slf4j:slf4j-log4j12:1.7.6"
    testRuntime "org.slf4j:log4j-over-slf4j:1.7.6"
    
    deployerJars "org.apache.maven.wagon:wagon-http:2.2"    
}

springBoot {
	// buildInfo()
    // enabled = false
    backupSource = false
}

bootRun {
    // enabled = false
    addResources = true
}

bootRepackage.withJarTask = jar
bootRepackage {
    // enabled = false
    mainClass = "${mainClassName}"
}

// dependencyManagement {
//   imports {
//     mavenBom 'io.spring.platform:platform-bom:2.0.8.RELEASE'
//     mavenBom 'org.springframework.boot:spring-boot-starter-parent:1.5.4.RELEASE'
//   }
// }

task copyTask(type: Copy) {
    from "${dockerfilePath}"
    into "build/libs"
    
    rename 'Dockerfile.*', 'Dockerfile'    
}

docker {
    // url = 'unix:///var/run/docker.sock'
    // certPath = new File(System.properties['user.home'], '.docker')
    certPath = file("${dockerCertPath}")

    registryCredentials {
        url = "${dockerHub}"
        username = "${dockerRegistryUsername}"
        password = "${dockerRegistryPassword}"
        email = "${dockerRegistryEmail}"
    }    
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task dockerBuild(type: DockerBuildImage, dependsOn: copyTask) {
    inputDir = file("${buildDir}/libs")
    dockerFile = file("${buildDir}/libs/Dockerfile")
    tag = "${dockerImageName}:${dockerImageTag}"
    buildArgs = ['app_version': "${version}"]
}

task dockerPush(type: DockerPushImage) {
    dependsOn dockerBuild
    imageName = "${dockerImageName}"
    tag = "${dockerImageTag}"
}

task buildDocker(type: se.transmode.gradle.plugins.docker.DockerTask, dependsOn: copyTask) {
    dockerfile = 'Dockerfile'
    // registry = '172.17.4.50:5000'
    // applicationName = "springboot-osev3-examples"
    // tagVersion = 'repositories-mem'
    tag = "${dockerImageName}:${dockerImageTag}"
    // runCommand 'echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list'
    // runCommand "apt-get update"
    // runCommand "apt-get install -y inotify-tools nginx apache2 openssh-server"
}